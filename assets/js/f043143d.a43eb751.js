"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6758],{3905:(e,t,a)=>{a.d(t,{Zo:()=>m,kt:()=>b});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(a),d=r,b=c["".concat(s,".").concat(d)]||c[d]||u[d]||i;return a?n.createElement(b,o(o({ref:t},m),{},{components:a})):n.createElement(b,o({ref:t},m))}));function b(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=a[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},42845:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var n=a(87462),r=(a(67294),a(3905));const i={id:"Code - Parallel_Computation - Labs - Lab 6",title:"Lab 6",sidebar_position:6},o=void 0,l={unversionedId:"Code/Parallel_Computation/Labs/Code - Parallel_Computation - Labs - Lab 6",id:"Code/Parallel_Computation/Labs/Code - Parallel_Computation - Labs - Lab 6",title:"Lab 6",description:"---",source:"@site/docs/Code/Parallel_Computation/Labs/Lab6.md",sourceDirName:"Code/Parallel_Computation/Labs",slug:"/Code/Parallel_Computation/Labs/Code - Parallel_Computation - Labs - Lab 6",permalink:"/myWiki/Code/Parallel_Computation/Labs/Code - Parallel_Computation - Labs - Lab 6",draft:!1,editUrl:"https://github.com/pwang649/myWiki/edit/main/docs/Code/Parallel_Computation/Labs/Lab6.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{id:"Code - Parallel_Computation - Labs - Lab 6",title:"Lab 6",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Lab 5",permalink:"/myWiki/Code/Parallel_Computation/Labs/Code - Parallel_Computation - Labs - Lab 5"},next:{title:"Lab 7",permalink:"/myWiki/Code/Parallel_Computation/Labs/Code - Parallel_Computation - Labs - Lab 7"}},s={},p=[{value:"Approach I",id:"approach-i",level:3},{value:"Code",id:"code",level:4},{value:"Result",id:"result",level:4},{value:"Approach II",id:"approach-ii",level:3},{value:"Code",id:"code-1",level:4},{value:"Result",id:"result-1",level:4}],m={toc:p},c="wrapper";function u(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("hr",null),(0,r.kt)("h3",{id:"approach-i"},"Approach I"),(0,r.kt)("h4",{id:"code"},"Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"cudaMemcpy(gpu_b, b, sizeof(int) * size * size, cudaMemcpyHostToDevice);\nfor (i = 0; i < nStreams; ++i) {\n int offset = i * streamSize;\n cudaMemcpyAsync(&gpu_a[offset], &a[offset], streamBytes, cudaMemcpyHostToDevice, stream[i]);\n matrix_multiplication<<<dimGrid, dimBlock, 0, stream[i]>>>(gpu_a, gpu_b, gpu_c, i);\n cudaMemcpyAsync(&gpu_c[offset], &c[offset], streamBytes, cudaMemcpyDeviceToHost, stream[i]);\n}\n")),(0,r.kt)("h4",{id:"result"},"Result"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"nStreams = 1"),":",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"time is 92.022301 ms\nc[451][451]=208282624\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"nStreams = 4"),":",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"time is 91.575935 ms\nc[451][451]=208282624\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"nStreams = 16"),":",(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"time is 91.250397 ms\nc[451][451]=208282624\n")))),(0,r.kt)("h3",{id:"approach-ii"},"Approach II"),(0,r.kt)("h4",{id:"code-1"},"Code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},"cudaMemcpy(gpu_b, b, sizeof(int) * size * size, cudaMemcpyHostToDevice);\nfor (i = 0; i < nStreams; ++i)\n{\n int offset = i * streamSize;\n cudaMemcpyAsync(&gpu_a[offset], &a[offset], streamBytes, cudaMemcpyHostToDevice, stream[i]);\n}\nfor (i = 0; i < nStreams; ++i)\n{\n matrix_multiplication<<<dimGrid, dimBlock, 0, stream[i]>>>(gpu_a, gpu_b, gpu_c, i);\n}\nfor (i = 0; i < nStreams; ++i)\n{\n int offset = i * streamSize;\n cudaMemcpyAsync(&c[offset], &gpu_c[offset], streamBytes, cudaMemcpyDeviceToHost, stream[i]);\n}\n")),(0,r.kt)("h4",{id:"result-1"},"Result"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"nStreams = 1"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"time is 92.028160 ms\nc[451][451]=208282624\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"nStreams = 4"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"time is 91.512543 ms\nc[451][451]=208282624\n"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"nStreams = 16"),":"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"time is 90.706047 ms\nc[451][451]=208282624\n")))),(0,r.kt)("admonition",{title:"Observation",type:"info"},(0,r.kt)("ol",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ol"},"More streams make the execution time faster. This is because more actions (memcopy and kernel) can be overlapped when we have more streams, saving some time on the overall execution."),(0,r.kt)("li",{parentName:"ol"},"Approach 2 is faster than approach 1 for ",(0,r.kt)("inlineCode",{parentName:"li"},"nStreams = 4")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"nStreams = 16")," because we don't have the wait for the block kernel function call each iteration. We can just dispatch all the memcopy calls all at once."))))}u.isMDXComponent=!0}}]);