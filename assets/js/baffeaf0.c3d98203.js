"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4485],{3905:(n,e,r)=>{r.d(e,{Zo:()=>c,kt:()=>M});var t=r(67294);function a(n,e,r){return e in n?Object.defineProperty(n,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):n[e]=r,n}function o(n,e){var r=Object.keys(n);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(n);e&&(t=t.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.push.apply(r,t)}return r}function i(n){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?o(Object(r),!0).forEach((function(e){a(n,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(r,e))}))}return n}function l(n,e){if(null==n)return{};var r,t,a=function(n,e){if(null==n)return{};var r,t,a={},o=Object.keys(n);for(t=0;t<o.length;t++)r=o[t],e.indexOf(r)>=0||(a[r]=n[r]);return a}(n,e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(n);for(t=0;t<o.length;t++)r=o[t],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(n,r)&&(a[r]=n[r])}return a}var u=t.createContext({}),m=function(n){var e=t.useContext(u),r=e;return n&&(r="function"==typeof n?n(e):i(i({},e),n)),r},c=function(n){var e=m(n.components);return t.createElement(u.Provider,{value:e},n.children)},s="mdxType",d={inlineCode:"code",wrapper:function(n){var e=n.children;return t.createElement(t.Fragment,{},e)}},p=t.forwardRef((function(n,e){var r=n.components,a=n.mdxType,o=n.originalType,u=n.parentName,c=l(n,["components","mdxType","originalType","parentName"]),s=m(r),p=a,M=s["".concat(u,".").concat(p)]||s[p]||d[p]||o;return r?t.createElement(M,i(i({ref:e},c),{},{components:r})):t.createElement(M,i({ref:e},c))}));function M(n,e){var r=arguments,a=e&&e.mdxType;if("string"==typeof n||a){var o=r.length,i=new Array(o);i[0]=p;var l={};for(var u in e)hasOwnProperty.call(e,u)&&(l[u]=e[u]);l.originalType=n,l[s]="string"==typeof n?n:a,i[1]=l;for(var m=2;m<o;m++)i[m]=r[m];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}p.displayName="MDXCreateElement"},20227:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>u,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var t=r(87462),a=(r(67294),r(3905));const o={id:"Code - Parallel_Computation - Labs - Lab 4",title:"Lab 4",sidebar_position:4},i=void 0,l={unversionedId:"Code/Parallel_Computation/Labs/Code - Parallel_Computation - Labs - Lab 4",id:"Code/Parallel_Computation/Labs/Code - Parallel_Computation - Labs - Lab 4",title:"Lab 4",description:"---",source:"@site/docs/Code/Parallel_Computation/Labs/Lab4.md",sourceDirName:"Code/Parallel_Computation/Labs",slug:"/Code/Parallel_Computation/Labs/Code - Parallel_Computation - Labs - Lab 4",permalink:"/myWiki/Code/Parallel_Computation/Labs/Code - Parallel_Computation - Labs - Lab 4",draft:!1,editUrl:"https://github.com/pwang649/myWiki/edit/main/docs/Code/Parallel_Computation/Labs/Lab4.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{id:"Code - Parallel_Computation - Labs - Lab 4",title:"Lab 4",sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Lab 3",permalink:"/myWiki/Code/Parallel_Computation/Labs/Code - Parallel_Computation - Labs - Lab 3"},next:{title:"MPC Demo",permalink:"/myWiki/Code/Robotics/Code - Robotics - MPC"}},u={},m=[{value:"Problem 1",id:"problem-1",level:2},{value:"Code",id:"code",level:3},{value:"Output",id:"output",level:3},{value:"Problem 2",id:"problem-2",level:2},{value:"Method I",id:"method-i",level:3},{value:"Code",id:"code-1",level:4},{value:"Output",id:"output-1",level:4},{value:"Method II",id:"method-ii",level:3},{value:"Code",id:"code-2",level:4},{value:"Output",id:"output-2",level:4},{value:"Method III",id:"method-iii",level:3},{value:"Code",id:"code-3",level:4},{value:"Output",id:"output-3",level:4}],c={toc:m},s="wrapper";function d(n){let{components:e,...r}=n;return(0,a.kt)(s,(0,t.Z)({},c,r,{components:e,mdxType:"MDXLayout"}),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"problem-1"},"Problem 1"),(0,a.kt)("h3",{id:"code"},"Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'main(int argc, char** argv)\n{\n    int size, rank;\n    int number;\n\n    MPI_Init(&argc, &argv);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n\n    if (rank != 0)\n    {\n        MPI_Recv(&number, 1, MPI_INT, rank - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        number += 1;\n        printf("Process %d: Msg = %d\\n", rank, number);\n    }\n    else\n    {\n        number = 451;\n        printf("Process %d: Initially Msg = %d\\n", rank, number);\n    }\n\n    MPI_Send(&number, 1, MPI_INT, (rank + 1) % size, 0, MPI_COMM_WORLD);\n\n    if (rank == 0)\n    {\n        MPI_Recv(&number, 1, MPI_INT, size - 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        printf("Process %d: Received Msg = %d. Done!\\n", rank, number);\n    }\n\n    MPI_Finalize();\n\n    return 0;\n}\n')),(0,a.kt)("h3",{id:"output"},"Output"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"Process 1: Msg = 452\nProcess 3: Msg = 454\nProcess 0: Initially Msg = 451\nProcess 0: Received Msg = 454. Done!\nProcess 2: Msg = 453\n")),(0,a.kt)("h2",{id:"problem-2"},"Problem 2"),(0,a.kt)("h3",{id:"method-i"},"Method I"),(0,a.kt)("h4",{id:"code-1"},"Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'main(int argc, char **argv)\n{\n    int size, rank;\n    int number;\n\n    MPI_Init(&argc, &argv);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n    FILE *nd;\n    nd = fopen("number.txt", "r");\n\n    int arr[64];\n    int i, localSum = 0;\n\n    for (i = 0; i < 64; i++)\n    {\n        fscanf(nd, "%d", &arr[i]);\n    }\n\n    for (i = rank * 16; i < rank * 16 + 16; i++)\n    {\n        localSum += arr[i];\n    }\n    if (rank != 0) {\n        MPI_Send(&localSum, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);\n    } else {\n        int globalSum = localSum;\n        MPI_Recv(&localSum, 1, MPI_INT, 1, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        globalSum += localSum;\n        MPI_Recv(&localSum, 1, MPI_INT, 2, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        globalSum += localSum;\n        MPI_Recv(&localSum, 1, MPI_INT, 3, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);\n        globalSum += localSum;\n        printf("p2_1 sum: %d\\n", globalSum);\n    }\n\n    MPI_Finalize();\n\n    return 0;\n}\n')),(0,a.kt)("h4",{id:"output-1"},"Output"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"p2_1 sum: 47126\n")),(0,a.kt)("h3",{id:"method-ii"},"Method II"),(0,a.kt)("h4",{id:"code-2"},"Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'main(int argc, char **argv)\n{\n    int size, rank;\n    int number;\n    int arr[64];\n    int i, localSum = 0;\n\n    MPI_Init(&argc, &argv);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n\n    if (rank == 0) {\n        FILE *nd;\n        nd = fopen("number.txt", "r");\n        for (i = 0; i < 64; i++)\n        {\n            fscanf(nd, "%d", &arr[i]);\n        }\n    }\n\n    MPI_Bcast(&arr, 64, MPI_INT, 0, MPI_COMM_WORLD);\n    \n    for (i = rank * 16; i < rank * 16 + 16; i++)\n    {\n        localSum += arr[i];\n    }\n\n    int globalSum;\n    MPI_Reduce(&localSum, &globalSum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);\n\n    if (rank == 0)\n    {\n        printf("p2_2 sum: %d\\n", globalSum);\n    }\n\n    MPI_Finalize();\n\n    return 0;\n}\n')),(0,a.kt)("h4",{id:"output-2"},"Output"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"p2_2 sum: 47126\n")),(0,a.kt)("h3",{id:"method-iii"},"Method III"),(0,a.kt)("h4",{id:"code-3"},"Code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-c"},'main(int argc, char **argv)\n{\n    int size, rank;\n    int number;\n    int arr[64];\n    int i, localSum = 0;\n\n    MPI_Init(&argc, &argv);\n    MPI_Comm_size(MPI_COMM_WORLD, &size);\n    MPI_Comm_rank(MPI_COMM_WORLD, &rank);\n\n    if (rank == 0)\n    {\n        FILE *nd;\n        nd = fopen("number.txt", "r");\n        for (i = 0; i < 64; i++)\n        {\n            fscanf(nd, "%d", &arr[i]);\n        }\n    }\n\n    int newArr[16];\n    MPI_Scatter(arr, 16, MPI_INT, &newArr, 16, MPI_INT, 0, MPI_COMM_WORLD);\n\n    for (i = 0; i < 16; i++)\n    {\n        localSum += newArr[i];\n    }\n\n    int globalSum;\n    int sumArr[4];\n    MPI_Gather(&localSum, 1, MPI_INT, &sumArr, 1, MPI_INT, 0, MPI_COMM_WORLD);\n    if (rank == 0)\n    {\n        for (i = 0; i < 4; i++)\n        {\n            globalSum += sumArr[i];\n        }\n        printf("p2_3 sum: %d\\n", globalSum);\n    }\n\n    MPI_Finalize();\n\n    return 0;\n}\n')),(0,a.kt)("h4",{id:"output-3"},"Output"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"p2_3 sum: 47126\n")))}d.isMDXComponent=!0}}]);